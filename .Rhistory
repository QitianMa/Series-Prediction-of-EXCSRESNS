print(temp2$mean)
print(ifelse(is.na(temp2), NA, temp2$mean))
n <- n+1
store <- c()
n=100
while(n<=length(raw.ts)){
temp <- Arima(order=c(1,0,3), raw.ts[1:n])
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
print(temp2$mean)
print(ifelse(is.na(temp2), NA, temp2$mean))
n <- n+1
}
store <- c()
n=100
while(n<=length(raw.ts)){
temp <- Arima(order=c(1,0,3), raw.ts[1:n])
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
print(1)
print(temp2$mean)
print(2)
print(ifelse(is.na(temp2), NA, temp2$mean))
n <- n+1
}
temp2
is.na(temp2)
all(is.na(temp2))
store <- c()
n=100
while(n<=length(raw.ts)){
temp <- Arima(order=c(1,0,3), raw.ts[1:n])
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
print(1)
print(temp2$mean)
print(2)
print(ifelse(all(is.na(temp2))), NA, temp2$mean)
n <- n+1
}
store <- c()
n=100
while(n<=length(raw.ts)){
temp <- Arima(order=c(1,0,3), raw.ts[1:n])
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
print(1)
print(temp2$mean)
print(2)
print(ifelse(all(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store
store <- c()
n=100
while(n<=length(raw.ts)){
temp <- Arima(order=c(1,0,3), raw.ts[1:n])
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
print(1)
print(temp2$mean)
print(2)
store <<- c(store, ifelse(all(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store
length(store)
store <- c()
n=100
while(n<=length(raw.ts)){
temp <- Arima(order=c(1,0,3), raw.ts[1:n])
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
print(1)
print(temp2$mean)
print(2)
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store
store <- c()
n=1
while(n<=length(raw.ts)){
temp <- Arima(order=c(1,0,3), raw.ts[1:n])
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
print(1)
print(temp2$mean)
print(2)
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- c()
n=5
while(n<=length(raw.ts)){
temp <- Arima(order=c(1,0,3), raw.ts[1:n])
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
print(1)
print(temp2$mean)
print(2)
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- c()
n=5
while(n<=length(raw.ts)){
temp <- trycatch(Arima(order=c(1,0,3), raw.ts[1:n]), error=function(e){print("error"); NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
print(1)
print(temp2$mean)
print(2)
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
store <- c()
n=5
while(n<=length(raw.ts)){
temp <- trycatch(Arima(order=c(1,0,3), raw.ts[1:n]), error=function(e){print("error"); NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
print(1)
print(temp2$mean)
print(2)
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- c()
n=5
while(n<=length(raw.ts)){
temp <- tryCatch(Arima(order=c(1,0,3), raw.ts[1:n]), error=function(e){print("error"); NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
print(1)
print(temp2$mean)
print(2)
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store
length(store)
length(raw.ts)
store <- c()
n=1
while(n<=length(raw.ts)){
temp <- tryCatch(Arima(order=c(1,0,3), raw.ts[1:n]), error=function(e){print("error"); NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
print(temp2$mean)
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
length(store)
length(raw.ts)
store
store <- ts(store, start=c(2009,1), freq=12)
plot(raw.ts)
par(new=TRUE)
plot(store, type="l", col="red")
autoplot(raw.ts) +
autolayer(store, series="one-step ahead prediction", color="red")
source('~/Documents/TimeSeriesBrandeis/Final_Project/code.R')
source('~/Documents/TimeSeriesBrandeis/Final_Project/code.R')
source('~/Documents/TimeSeriesBrandeis/Final_Project/code.R')
source('~/Documents/TimeSeriesBrandeis/Final_Project/code.R')
library(tidyverse)
library(forecast)
library(urca)
raw.ts <- read_csv("EXCSRESNS.csv")
raw.ts$DATE <- date(raw.ts$DATE)
raw.ts$DTBSPCKM <- as.numeric(raw.ts$EXCSRESNS)
raw.ts <- raw.ts[order(raw.ts$DATE), ]
# select year after 2009
raw.ts <- raw.ts[300:length(raw.ts$DATE),]
raw.ts <- ts(raw.ts$EXCSRESNS, start=c(2009,1), freq=12)
# unit root test
summary(ur.df(raw.ts, type="trend", selectlags="BIC"))
raw.dif.ts <- diff(raw.ts)
summary(ur.df(raw.dif.ts, type="trend", selectlags="BIC"))
# general plot
autoplot(raw.dif.ts)
# plot acf pacf
acf(raw.dif.ts) # MA(1) or MA(3)
pacf(raw.dif.ts) # AR(3)
# trend and seasonality
raw.dif.trend.lin <- tslm(raw.dif.ts~trend+season)
summary(raw.trend.lin)
auto.arima(raw.dif.ts)
# model
arima.mod <- function(x, h){
temp <- Arima(order=c(1,0,3), x)
temp2 <- tryCatch(forecast(temp, h=h), error=function(e){print("error"); NA})
temp2
}
eCV <- tsCV(raw.ts, arima.mod, h=1)
rmseCV <- sqrt( mean( eCV^2,na.rm=TRUE))
exptrend.mod <- function(x, h){
ses(x, h=1, alpha=0.6)
}
eCV.exp <- tsCV(raw.ts, exptrend.mod, h=1)
rmseCV.exp <- sqrt( mean( eCV.exp^2,na.rm=TRUE))
rmseCV > rmseCV.exp
# model
arima.mod <- function(x, h){
temp <- Arima(order=c(1,0,3), x)
temp2 <- tryCatch(forecast(temp, h=h), error=function(e){print("error"); NA})
temp2
}
eCV <- tsCV(raw.ts, arima.mod, h=1)
rmseCV <- sqrt( mean( eCV^2,na.rm=TRUE))
exptrend.mod <- function(x, h){
ses(x, h=1, alpha=0.6)
}
eCV.exp <- tsCV(raw.ts, exptrend.mod, h=1)
rmseCV.exp <- sqrt( mean( eCV.exp^2,na.rm=TRUE))
rmseCV < rmseCV.exp
# Prediction Plot
store <- c()
n=1
while(n<=length(raw.ts)){
temp <- tryCatch(Arima(order=c(1,0,3), raw.ts[1:n]), error=function(e){print("error"); NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- ts(store, start=c(2009,1), freq=12)
autoplot(raw.ts) +
autolayer(store, series="one-step ahead prediction", color="red")
library(tidyverse)
library(forecast)
library(urca)
raw.ts <- read_csv("EXCSRESNS.csv")
raw.ts$DATE <- date(raw.ts$DATE)
raw.ts$DTBSPCKM <- as.numeric(raw.ts$EXCSRESNS)
raw.ts <- raw.ts[order(raw.ts$DATE), ]
# select year after 2009
raw.ts <- raw.ts[300:length(raw.ts$DATE),]
raw.ts <- ts(raw.ts$EXCSRESNS, start=c(2009,1), freq=12)
# unit root test
summary(ur.df(raw.ts, type="trend", selectlags="BIC"))
raw.dif.ts <- diff(raw.ts)
summary(ur.df(raw.dif.ts, type="trend", selectlags="BIC"))
library(tidyverse)
library(forecast)
library(urca)
raw.ts <- read_csv("EXCSRESNS.csv")
raw.ts$DATE <- date(raw.ts$DATE)
# unit root test
summary(ur.df(raw.ts, type="trend", selectlags="BIC"))
raw.ts
library(tidyverse)
library(forecast)
library(urca)
raw.ts <- read_csv("EXCSRESNS.csv")
raw.ts$DATE <- date(raw.ts$DATE)
raw.ts
library(tidyverse)
library(forecast)
library(lubridate)
library(urca)
raw.ts <- read_csv("EXCSRESNS.csv")
raw.ts$DATE <- date(raw.ts$DATE)
raw.ts$DTBSPCKM <- as.numeric(raw.ts$EXCSRESNS)
raw.ts <- raw.ts[order(raw.ts$DATE), ]
# select year after 2009
raw.ts <- raw.ts[300:length(raw.ts$DATE),]
raw.ts <- ts(raw.ts$EXCSRESNS, start=c(2009,1), freq=12)
# unit root test
summary(ur.df(raw.ts, type="trend", selectlags="BIC"))
raw.dif.ts <- diff(raw.ts)
summary(ur.df(raw.dif.ts, type="trend", selectlags="BIC"))
library(tidyverse)
library(forecast)
library(lubridate)
library(urca)
raw.ts <- read_csv("EXCSRESNS.csv")
raw.ts$DATE <- date(raw.ts$DATE)
raw.ts$DTBSPCKM <- as.numeric(raw.ts$EXCSRESNS)
raw.ts <- raw.ts[order(raw.ts$DATE), ]
# select year after 2009
raw.ts <- raw.ts[300:length(raw.ts$DATE),]
raw.ts <- ts(raw.ts$EXCSRESNS, start=c(2009,1), freq=12)
# unit root test
summary(ur.df(raw.ts, type="trend", selectlags="BIC"))
raw.dif.ts <- diff(raw.ts)
summary(ur.df(raw.dif.ts, type="trend", selectlags="BIC"))
# general plot
autoplot(raw.dif.ts)
# plot acf pacf
acf(raw.dif.ts) # MA(1) or MA(3)
pacf(raw.dif.ts) # AR(3)
# trend and seasonality
raw.dif.trend.lin <- tslm(raw.dif.ts~trend+season)
summary(raw.trend.lin)
auto.arima(raw.dif.ts)
# model
arima.mod <- function(x, h){
temp <- Arima(order=c(1,0,3), x)
temp2 <- tryCatch(forecast(temp, h=h), error=function(e){print("error"); NA})
temp2
}
eCV <- tsCV(raw.ts, arima.mod, h=1)
rmseCV <- sqrt( mean( eCV^2,na.rm=TRUE))
exptrend.mod <- function(x, h){
ses(x, h=1, alpha=0.6)
}
eCV.exp <- tsCV(raw.ts, exptrend.mod, h=1)
rmseCV.exp <- sqrt( mean( eCV.exp^2,na.rm=TRUE))
rmseCV < rmseCV.exp
# Prediction Plot
store <- c()
n=1
while(n<=length(raw.ts)){
temp <- tryCatch(Arima(order=c(1,0,3), raw.ts[1:n]), error=function(e){print("error"); NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- ts(store, start=c(2009,1), freq=12)
autoplot(raw.ts) +
autolayer(store, series="one-step ahead prediction", color="red")
# Prediction Plot
store <- c()
n=1
while(n<=length(raw.ts)){
temp <- tryCatch(Arima(order=c(1,0,3), raw.ts[1:n]), error=function(e){NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){NA})
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- ts(store, start=c(2009,2), freq=12)
autoplot(raw.ts) +
autolayer(store, series="one-step ahead prediction", color="red")
summary(ur.df(raw.ts, type="trend", selectlags="BIC"))
a <- summary(ur.df(raw.ts, type="trend", selectlags="BIC"))
a@cval[2]
a@teststat[3]
a <- summary(ur.df(raw.ts , selectlags="BIC"))
a
a@teststat[3]
library(tidyverse)
library(forecast)
library(urca)
raw.ts <- read_csv("EXCSRESNS.csv")
raw.ts$DATE <- date(raw.ts$DATE)
raw.ts$DTBSPCKM <- as.numeric(raw.ts$EXCSRESNS)
raw.ts <- raw.ts[order(raw.ts$DATE), ]
# select year after 2009
raw.ts <- raw.ts[300:length(raw.ts$DATE),]
raw.ts <- ts(raw.ts$EXCSRESNS, start=c(2009,1), freq=12)
# unit root test
summary(ur.df(raw.ts, type="trend", selectlags="BIC"))
raw.dif.ts <- diff(raw.ts)
summary(ur.df(raw.dif.ts, type="trend", selectlags="BIC"))
# general plot
autoplot(raw.dif.ts)
# plot acf pacf
acf(raw.dif.ts) # MA(1) or MA(3)
pacf(raw.dif.ts) # AR(3)
# trend and seasonality
raw.dif.trend.lin <- tslm(raw.dif.ts~trend+season)
summary(raw.trend.lin)
auto.arima(raw.dif.ts)
# model
arima.mod <- function(x, h){
temp <- Arima(order=c(1,0,3), x)
temp2 <- tryCatch(forecast(temp, h=h), error=function(e){print("error"); NA})
temp2
}
eCV <- tsCV(raw.dif.ts, arima.mod, h=1)
rmseCV <- sqrt( mean( eCV^2,na.rm=TRUE))
exptrend.mod <- function(x, h){
ses(x, h=1, alpha=0.6)
}
eCV.exp <- tsCV(raw.dif.ts, exptrend.mod, h=1)
rmseCV.exp <- sqrt( mean( eCV.exp^2,na.rm=TRUE))
store <- c()
n=1
while(n<=length(raw.ts)){
temp <- tryCatch(Arima(order=c(1,0,3), raw.ts[1:n]), error=function(e){print("error"); NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- ts(store, start=c(2009,1), freq=12)
# Prediction Plot
autoplot(raw.ts) +
autolayer(store, series="one-step ahead prediction", color="red")
store <- c()
n=1
while(n<=length(raw.dif.ts)){
temp <- tryCatch(Arima(order=c(1,0,3), raw.ts[1:n]), error=function(e){print("error"); NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- ts(store, start=c(2009,1), freq=12)
# Prediction Plot
autoplot(raw.ts) +
autolayer(store, series="one-step ahead prediction", color="red")
eCV
rmseCV
rmseCV.exp
store <- c()
n=1
while(n<=length(raw.dif.ts)){
temp <- tryCatch(Arima(order=c(1,0,3), raw.ts[1:n]), error=function(e){print("error"); NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- ts(store, start=c(2009,2), freq=12)
# Prediction Plot
autoplot(raw.ts) +
autolayer(store, series="one-step ahead prediction", color="red")
autoplot(raw.dif.ts) +
autolayer(store, series="one-step ahead prediction", color="red")
store <- c()
n=1
while(n<=length(raw.dif.ts)){
temp <- tryCatch(Arima(order=c(1,0,3), raw.ts[1:n]), error=function(e){print("error"); NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- ts(store, start=c(2009,2), freq=12)
# Prediction Plot
autoplot(raw.dif.ts) +
autolayer(store, series="one-step ahead prediction", color="red")
store <- c()
n=1
while(n<=length(raw.dif.ts)){
temp <- tryCatch(Arima(order=c(1,0,3), raw.dif.ts[1:n]), error=function(e){print("error"); NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){print("error"); NA})
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- ts(store, start=c(2009,2), freq=12)
# Prediction Plot
autoplot(raw.dif.ts) +
autolayer(store, series="one-step ahead prediction", color="red")
autoplot(raw.dif.ts) +
autolayer(store, series="one-step ahead prediction", color="red") +
ggtitle("True (black) vs Predicted (red)")
# general plot
autoplot(raw.dif.ts)
# general plot
autoplot(raw.dif.ts) +
ggtitle("First-differentiated")
# general plot
autoplot(raw.dif.ts) +
ggtitle("After frst-differentiation")
library(tidyverse)
library(forecast)
library(lubridate)
library(urca)
raw.ts <- read_csv("EXCSRESNS.csv")
raw.ts$DATE <- date(raw.ts$DATE)
raw.ts$DTBSPCKM <- as.numeric(raw.ts$EXCSRESNS)
raw.ts <- raw.ts[order(raw.ts$DATE), ]
# select year after 2009
raw.ts <- raw.ts[300:length(raw.ts$DATE),]
raw.ts <- ts(raw.ts$EXCSRESNS, start=c(2009,1), freq=12)
# Prediction Plot
store <- c()
n=1
while(n<=length(raw.dif.ts)){
temp <- tryCatch(Arima(order=c(1,0,3), raw.dif.ts[1:n]), error=function(e){NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){NA})
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- ts(store, start=c(2009,2), freq=12) # The first input series is just 2009-1 and the prediction is 2009-2
autoplot(raw.ts) +
autolayer(store, series="one-step ahead prediction", color="red")
# Prediction Plot
store <- c()
n=1
while(n<=length(raw.dif.ts)){
temp <- tryCatch(Arima(order=c(1,0,3), raw.dif.ts[1:n]), error=function(e){NA})
temp2 <- tryCatch(forecast(temp, h=1), error=function(e){NA})
store <<- c(store, ifelse(any(is.na(temp2)), NA, temp2$mean))
n <- n+1
}
store <- ts(store, start=c(2009,2), freq=12) # The first input series is just 2009-1 and the prediction is 2009-2
autoplot(raw.dif.ts) +
autolayer(store, series="one-step ahead prediction", color="red") +
ggtitle("True (black) vs Predicted (red)")
# Diebold/Mariano test
arima(raw.dif.ts)$fitted
# Diebold/Mariano test
arima(raw.dif.ts, order=c(1,0,3))$fitted
# Diebold/Mariano test
arima(raw.dif.ts, order=c(1,0,3))
# Diebold/Mariano test
arima(raw.dif.ts, order=c(1,0,3))$res
# Diebold/Mariano test
res.exp <- ses(raw.dif.ts, alpha=0.6)$res
res.exp
?em.test
?dm.test
dm.test(res.exp, res.arma, alternative="greater")
res.arma <- arima(raw.dif.ts, order=c(1,0,3))$res
dm.test(res.exp, res.arma, alternative="greater")
# model
arima.mod <- function(x, h){
temp <- Arima(order=c(1,0,3), x)
temp2 <- tryCatch(forecast(temp, h=h), error=function(e){print("error"); NA})
temp2
}
eCV <- tsCV(raw.dif.ts, arima.mod, h=1)
rmseCV <- sqrt( mean( eCV^2,na.rm=TRUE))
exptrend.mod <- function(x, h){
ses(x, h=1, alpha=0.6)
}
eCV.exp <- tsCV(raw.dif.ts, exptrend.mod, h=1)
rmseCV.exp <- sqrt( mean( eCV.exp^2,na.rm=TRUE))
rmseCV < rmseCV.exp
# Diebold/Mariano test
res.exp <- ses(raw.dif.ts, alpha=0.6)$res
arima.mod <- arima(raw.dif.ts, order=c(1,0,3))
res.arma <- arima.mod$res
dm.test(res.exp, res.arma, alternative="greater")
summary(arima.mod)
